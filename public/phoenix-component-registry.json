{
  "projectId": "202f3e93-ad91-4862-b027-efb728e07e70",
  "userId": "2luDlbgjvhO32uRKNns0OwSKemA3",
  "version": "1.0.0",
  "generatedAt": "2025-09-19T00:39:30.177Z",
  "components": {
    "phoenix-1758242370161": {
      "phoenixId": "phoenix-1758242370161",
      "componentName": "Error",
      "filePath": "src/app/error.tsx",
      "lineNumber": 5,
      "columnNumber": 15,
      "sourceCode": "export default function Error() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">500 - Server Error</h1>\n        <p className=\"text-xl mb-4\">Something went wrong. Please try again later.</p>\n        <a href=\"/\" className=\"text-blue-500 hover:text-blue-700 underline\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n}",
      "props": [],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "complexity": "moderate"
      }
    },
    "phoenix-1758242370162": {
      "phoenixId": "phoenix-1758242370162",
      "componentName": "FavoritesPage",
      "filePath": "src/app/favorites/page.tsx",
      "lineNumber": 11,
      "columnNumber": 15,
      "sourceCode": "export default function FavoritesPage() {\n  const { state } = usePokemonContext();\n  const { data: favoritePokemon = [], isLoading } = usePokemonCards(\n    state.favorites,\n    { enabled: state.favorites.length > 0 }\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 to-gray-800\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-8\">\n          <Button variant=\"outline\" size=\"icon\" asChild className=\"border-white/20 text-white hover:bg-white/10\">\n            <Link href=\"/\">\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Link>\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold text-white flex items-center gap-2\">\n              <Heart className=\"h-8 w-8 text-red-500 fill-current\" />\n              My Favorites\n            </h1>\n            <p className=\"text-white/70\">Your favorite Pokémon collection</p>\n          </div>\n        </div>\n\n        {/* Favorites Grid */}\n        <PokemonGrid\n          pokemon={favoritePokemon}\n          loading={isLoading}\n          error={state.favorites.length === 0 ? 'No favorites yet' : undefined}\n        />\n\n        {state.favorites.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Heart className=\"h-16 w-16 text-white/30 mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold text-white mb-2\">No favorites yet</h2>\n            <p className=\"text-white/70 mb-6\">\n              Start adding Pokémon to your favorites by clicking the heart icon on any Pokémon card.\n            </p>\n            <Button asChild variant=\"outline\" className=\"border-white/20 text-white hover:bg-white/10\">\n              <Link href=\"/\">Browse Pokémon</Link>\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}",
      "props": [],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change",
        "careful-modification",
        "test-thoroughly"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "hooks": [
          "usePokemonContext",
          "usePokemonCards"
        ],
        "complexity": "complex"
      }
    },
    "phoenix-1758242370163": {
      "phoenixId": "phoenix-1758242370163",
      "componentName": "GlobalError",
      "filePath": "src/app/global-error.tsx",
      "lineNumber": 5,
      "columnNumber": 15,
      "sourceCode": "export default function GlobalError({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  return (\n    <html>\n      <body>\n        <div style={{\n          minHeight: '100vh',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          padding: '2rem',\n          fontFamily: 'system-ui, sans-serif'\n        }}>\n          <div style={{ textAlign: 'center', maxWidth: '500px' }}>\n            <h1 style={{ fontSize: '2rem', marginBottom: '1rem', color: '#dc2626' }}>\n              Something went wrong!\n            </h1>\n            <p style={{ fontSize: '1.1rem', marginBottom: '2rem', color: '#6b7280' }}>\n              The application encountered an unexpected error. This is likely temporary.\n            </p>\n            <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center', flexWrap: 'wrap' }}>\n              <button\n                onClick={reset}\n                style={{\n                  padding: '0.75rem 1.5rem',\n                  backgroundColor: '#3b82f6',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '0.5rem',\n                  cursor: 'pointer',\n                  fontSize: '1rem'\n                }}\n              >\n                Try Again\n              </button>\n              <button\n                onClick={() => window.location.href = '/'}\n                style={{\n                  padding: '0.75rem 1.5rem',\n                  backgroundColor: '#6b7280',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '0.5rem',\n                  cursor: 'pointer',\n                  fontSize: '1rem'\n                }}\n              >\n                Go Home\n              </button>\n            </div>\n            {process.env.NODE_ENV === 'development' && (\n              <details style={{ marginTop: '2rem', textAlign: 'left' }}>\n                <summary style={{ cursor: 'pointer', fontWeight: 'bold' }}>\n                  Error Details (Development Only)\n                </summary>\n                <pre style={{ \n                  marginTop: '1rem', \n                  padding: '1rem', \n                  backgroundColor: '#f3f4f6', \n                  borderRadius: '0.5rem',\n                  fontSize: '0.875rem',\n                  overflow: 'auto'\n                }}>\n                  {error.message}\n                  {error.stack && '\\n\\nStack trace:\\n' + error.stack}\n                </pre>\n              </details>\n            )}\n          </div>\n        </div>\n      </body>\n    </html>\n  )\n}",
      "props": [
        {
          "name": "error",
          "type": "unknown",
          "required": false
        },
        {
          "name": "reset",
          "type": "unknown",
          "required": false
        }
      ],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change",
        "careful-modification",
        "test-thoroughly"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "complexity": "complex"
      }
    },
    "phoenix-1758242370164": {
      "phoenixId": "phoenix-1758242370164",
      "componentName": "RootLayout",
      "filePath": "src/app/layout.tsx",
      "lineNumber": 35,
      "columnNumber": 15,
      "sourceCode": "export default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning className=\"dark\">\n      <body\n        className={`${inter.variable} ${montserrat.variable} antialiased`}\n      >\n        <script src=\"/phoenix-tracking.js\" async></script>\n        <QueryProvider>\n          <ThemeProvider\n            attribute=\"class\"\n            defaultTheme=\"dark\"\n            enableSystem={false}\n            disableTransitionOnChange\n          >\n            <PokemonProvider>\n              <TooltipProvider>\n                {children}\n                <Toaster />\n                <Sonner />\n              </TooltipProvider>\n            </PokemonProvider>\n          </ThemeProvider>\n        </QueryProvider>\n      </body>\n    </html>\n  );\n}",
      "props": [
        {
          "name": "children",
          "type": "unknown",
          "required": false
        }
      ],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change",
        "careful-modification",
        "test-thoroughly"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "complexity": "complex"
      }
    },
    "phoenix-1758242370165": {
      "phoenixId": "phoenix-1758242370165",
      "componentName": "Loading",
      "filePath": "src/app/loading.tsx",
      "lineNumber": 1,
      "columnNumber": 15,
      "sourceCode": "export default function Loading() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center\">\n      <div className=\"text-center\">\n        <p className=\"text-xl\">Loading...</p>\n      </div>\n    </div>\n  );\n}",
      "props": [],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "complexity": "moderate"
      }
    },
    "phoenix-1758242370166": {
      "phoenixId": "phoenix-1758242370166",
      "componentName": "NotFound",
      "filePath": "src/app/not-found.tsx",
      "lineNumber": 3,
      "columnNumber": 15,
      "sourceCode": "export default function NotFound() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">404 - Page Not Found</h1>\n        <p className=\"text-xl mb-4\">The page you are looking for does not exist.</p>\n        <a href=\"/\" className=\"text-blue-500 hover:text-blue-700 underline\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n}",
      "props": [],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "complexity": "moderate"
      }
    },
    "phoenix-1758242370167": {
      "phoenixId": "phoenix-1758242370167",
      "componentName": "HomePage",
      "filePath": "src/app/page.tsx",
      "lineNumber": 6,
      "columnNumber": 15,
      "sourceCode": "export default function HomePage() {\n  return <PokemonDashboard />;\n}",
      "props": [],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "complexity": "simple"
      }
    },
    "phoenix-1758242370168": {
      "phoenixId": "phoenix-1758242370168",
      "componentName": "PokemonDetailPage",
      "filePath": "src/app/pokemon/[id]/page.tsx",
      "lineNumber": 20,
      "columnNumber": 15,
      "sourceCode": "export default function PokemonDetailPage() {\n  const params = useParams();\n  const pokemonId = parseInt(params.id as string);\n\n  const {\n    toggleFavorite,\n    selectPokemon,\n    isPokemonFavorite,\n    isPokemonSelected,\n    state\n  } = usePokemonContext();\n\n  const { data: pokemon, isLoading, error } = usePokemonCard(pokemonId);\n  const { data: evolutionChain, isLoading: evolutionLoading } = useEvolutionChain(pokemonId);\n\n  const isFavorite = isPokemonFavorite(pokemonId);\n  const isSelected = isPokemonSelected(pokemonId);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 flex items-center justify-center\">\n        <div className=\"flex items-center gap-3\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-white\" />\n          <span className=\"text-white text-lg\">Loading Pokémon...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !pokemon) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-white mb-4\">Pokémon not found</h1>\n          <Button asChild variant=\"outline\">\n            <Link href=\"/\">Back to Home</Link>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatIcon = (statName: string) => {\n    switch (statName.toLowerCase()) {\n      case 'hp':\n        return <Heart className=\"h-4 w-4 text-red-500\" />;\n      case 'attack':\n        return <Swords className=\"h-4 w-4 text-orange-500\" />;\n      case 'defense':\n        return <Shield className=\"h-4 w-4 text-blue-500\" />;\n      case 'sp. attack':\n        return <Zap className=\"h-4 w-4 text-purple-500\" />;\n      case 'sp. defense':\n        return <Shield className=\"h-4 w-4 text-green-500\" />;\n      case 'speed':\n        return <Star className=\"h-4 w-4 text-yellow-500\" />;\n      default:\n        return <TrendingUp className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatColor = (value: number) => {\n    if (value >= 120) return 'bg-green-500';\n    if (value >= 100) return 'bg-lime-500';\n    if (value >= 80) return 'bg-yellow-500';\n    if (value >= 60) return 'bg-orange-500';\n    if (value >= 40) return 'bg-red-500';\n    return 'bg-gray-500';\n  };\n\n  const totalStats = pokemon.stats.reduce((sum, stat) => sum + stat.value, 0);\n  const avgStat = Math.round(totalStats / pokemon.stats.length);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 to-gray-800\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-8\">\n          <Button variant=\"outline\" size=\"icon\" asChild className=\"border-white/20 text-white hover:bg-white/10\">\n            <Link href=\"/\">\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Link>\n          </Button>\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                #{pokemon.id.toString().padStart(3, '0')}\n              </Badge>\n              <h1 className=\"text-3xl font-bold text-white\">{pokemon.name}</h1>\n            </div>\n            <div className=\"flex gap-2 mt-2\">\n              {pokemon.types.map((type) => (\n                <Badge\n                  key={type}\n                  className={cn('text-sm px-3 py-1 text-white capitalize', `type-${type}`)}\n                >\n                  {type}\n                </Badge>\n              ))}\n            </div>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button\n              variant={isFavorite ? 'default' : 'outline'}\n              size=\"icon\"\n              onClick={() => toggleFavorite(pokemonId)}\n              className={cn(\n                'border-white/20',\n                isFavorite ? 'pokeball-bg hover:bg-red-600' : 'text-white hover:bg-white/10'\n              )}\n            >\n              <Heart className={cn('h-4 w-4', isFavorite && 'fill-current')} />\n            </Button>\n            {state.comparisonMode && (\n              <Button\n                variant={isSelected ? 'default' : 'outline'}\n                size=\"icon\"\n                onClick={() => selectPokemon(pokemonId)}\n                className={cn(\n                  'border-white/20',\n                  isSelected ? 'pokeball-bg hover:bg-red-600' : 'text-white hover:bg-white/10'\n                )}\n              >\n                <BarChart3 className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Pokemon Info */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            {/* Pokemon Image */}\n            <Card className=\"pokemon-card overflow-hidden\">\n              <CardContent className=\"p-6\">\n                <div className=\"relative w-full h-64 mb-4\">\n                  {pokemon.sprite ? (\n                    <Image\n                      src={pokemon.sprite}\n                      alt={pokemon.name}\n                      fill\n                      className=\"object-contain\"\n                      sizes=\"400px\"\n                      priority\n                    />\n                  ) : (\n                    <div className=\"w-full h-full bg-muted rounded-lg flex items-center justify-center\">\n                      <span className=\"text-6xl\">?</span>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Basic Info */}\n            <Card className=\"pokemon-card\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Basic Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <div className=\"text-muted-foreground\">Height</div>\n                    <div className=\"font-semibold text-white\">\n                      {(pokemon.height / 10).toFixed(1)} m\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-muted-foreground\">Weight</div>\n                    <div className=\"font-semibold text-white\">\n                      {(pokemon.weight / 10).toFixed(1)} kg\n                    </div>\n                  </div>\n                </div>\n                <Separator className=\"bg-border/50\" />\n                <div>\n                  <div className=\"text-muted-foreground mb-2\">Types</div>\n                  <div className=\"flex gap-2\">\n                    {pokemon.types.map((type) => (\n                      <Badge\n                        key={type}\n                        className={cn('text-white capitalize', `type-${type}`)}\n                      >\n                        {type}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Detailed Info */}\n          <div className=\"lg:col-span-2\">\n            <Tabs defaultValue=\"stats\" className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-3 lg:grid-cols-4\">\n                <TabsTrigger value=\"stats\">Stats</TabsTrigger>\n                <TabsTrigger value=\"evolution\">Evolution</TabsTrigger>\n                <TabsTrigger value=\"moves\">Moves</TabsTrigger>\n                <TabsTrigger value=\"abilities\" className=\"hidden lg:block\">Abilities</TabsTrigger>\n              </TabsList>\n\n              {/* Stats Tab */}\n              <TabsContent value=\"stats\" className=\"space-y-6\">\n                <Card className=\"pokemon-card\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white flex items-center gap-2\">\n                      <TrendingUp className=\"h-5 w-5\" />\n                      Base Stats\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {pokemon.stats.map((stat) => (\n                        <div key={stat.name} className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-2\">\n                              {getStatIcon(stat.name)}\n                              <span className=\"text-sm text-white font-medium\">\n                                {stat.name}\n                              </span>\n                            </div>\n                            <span className=\"text-sm font-bold text-white\">\n                              {stat.value}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Progress value={(stat.value / 255) * 100} className=\"flex-1\" />\n                            <div className=\"text-xs text-muted-foreground w-12 text-right\">\n                              {Math.round((stat.value / 255) * 100)}%\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n\n                      <Separator className=\"bg-border/50 my-4\" />\n\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-white\">{totalStats}</div>\n                          <div className=\"text-muted-foreground\">Total</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-white\">{avgStat}</div>\n                          <div className=\"text-muted-foreground\">Average</div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Stat Distribution Chart */}\n                <Card className=\"pokemon-card\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white\">Stat Distribution</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-3 gap-4 text-center\">\n                      {pokemon.stats.slice(0, 6).map((stat) => (\n                        <div key={stat.name} className=\"space-y-2\">\n                          <div className=\"text-xs text-muted-foreground\">{stat.name}</div>\n                          <div className=\"relative h-20 w-6 mx-auto bg-muted rounded-full overflow-hidden\">\n                            <div\n                              className={cn('absolute bottom-0 w-full rounded-full', getStatColor(stat.value))}\n                              style={{ height: `${(stat.value / 255) * 100}%` }}\n                            />\n                          </div>\n                          <div className=\"text-xs font-medium text-white\">{stat.value}</div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Evolution Tab */}\n              <TabsContent value=\"evolution\" className=\"space-y-6\">\n                <Card className=\"pokemon-card\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white\">Evolution Chain</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {evolutionLoading ? (\n                      <div className=\"flex items-center justify-center py-8\">\n                        <Loader2 className=\"h-6 w-6 animate-spin text-white\" />\n                        <span className=\"ml-2 text-white\">Loading evolution chain...</span>\n                      </div>\n                    ) : evolutionChain && evolutionChain.length > 0 ? (\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                        {evolutionChain.map((pokemon) => (\n                          <PokemonCard\n                            key={pokemon.id}\n                            pokemon={pokemon}\n                            variant=\"compact\"\n                            showStats={false}\n                          />\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8 text-muted-foreground\">\n                        This Pokémon does not evolve.\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Moves Tab */}\n              <TabsContent value=\"moves\">\n                <Card className=\"pokemon-card\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white\">Moves</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      Move information coming soon...\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Abilities Tab */}\n              <TabsContent value=\"abilities\">\n                <Card className=\"pokemon-card\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white\">Abilities</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      Ability information coming soon...\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}",
      "props": [],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change",
        "careful-modification",
        "test-thoroughly"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "hooks": [
          "useParams",
          "usePokemonContext",
          "usePokemonCard",
          "useEvolutionChain"
        ],
        "complexity": "complex"
      }
    },
    "phoenix-1758242370169": {
      "phoenixId": "phoenix-1758242370169",
      "componentName": "Header",
      "filePath": "src/components/layout/header.tsx",
      "lineNumber": 16,
      "columnNumber": 7,
      "sourceCode": "export function Header({ className }: HeaderProps) {\n  const {\n    state,\n    setFilter,\n    addSearchTerm,\n    toggleSidebar,\n    toggleComparisonMode,\n    getActiveFiltersCount,\n  } = usePokemonContext();\n\n  const handleSearch = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const query = formData.get('search') as string;\n\n    if (query?.trim()) {\n      setFilter({ searchQuery: query.trim() });\n      addSearchTerm(query.trim());\n    }\n  };\n\n  const clearSearch = () => {\n    setFilter({ searchQuery: '' });\n  };\n\n  const navigationItems = [\n    { href: '/', icon: Home, label: 'Home', active: true },\n    { href: '/database', icon: Database, label: 'Database', active: false },\n    { href: '/abilities', icon: Zap, label: 'Abilities', active: false },\n    { href: '/news', icon: Newspaper, label: 'News', active: false },\n    { href: '/account', icon: User, label: 'Account', active: false },\n  ];\n\n  const activeFiltersCount = getActiveFiltersCount();\n\n  return (\n    <header className={cn('pokemon-gradient border-b border-border/50 backdrop-blur-sm', className)}>\n      <div className=\"container mx-auto px-4 py-4\">\n        <div className=\"flex items-center justify-between gap-4\">\n          {/* Left: Logo and Navigation */}\n          <div className=\"flex items-center gap-8\">\n            {/* Mobile Menu Button */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleSidebar}\n              className=\"lg:hidden pokeball-red hover:bg-white/10\"\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n\n            {/* Logo */}\n            <Link href=\"/\" className=\"flex items-center gap-3 group\">\n              <div className=\"relative\">\n                <div className=\"w-10 h-10 pokeball-bg rounded-full flex items-center justify-center shadow-lg group-hover:shadow-xl transition-shadow\">\n                  <div className=\"w-4 h-4 bg-white rounded-full\"></div>\n                </div>\n                <div className=\"absolute inset-0 w-10 h-10 border-4 border-white rounded-full\"></div>\n                <div className=\"absolute top-1/2 left-0 right-0 h-0.5 bg-white transform -translate-y-px\"></div>\n              </div>\n              <span className=\"text-xl font-bold text-white tracking-wide hidden sm:block\">\n                POKÉDEX\n              </span>\n            </Link>\n\n            {/* Desktop Navigation */}\n            <nav className=\"hidden lg:flex items-center gap-1\">\n              {navigationItems.map((item) => {\n                const Icon = item.icon;\n                return (\n                  <Link\n                    key={item.href}\n                    href={item.href}\n                    className={cn(\n                      'flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium transition-colors',\n                      item.active\n                        ? 'text-white bg-white/10 border border-white/20'\n                        : 'text-white/70 hover:text-white hover:bg-white/5'\n                    )}\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                    {item.label}\n                  </Link>\n                );\n              })}\n            </nav>\n          </div>\n\n          {/* Center: Search */}\n          <div className=\"flex-1 max-w-md mx-4\">\n            <form onSubmit={handleSearch} className=\"relative\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  name=\"search\"\n                  placeholder=\"Search Pokemon...\"\n                  defaultValue={state.filters.searchQuery}\n                  className=\"pl-10 bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:bg-white/20 focus:border-white/30\"\n                />\n                {state.filters.searchQuery && (\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={clearSearch}\n                    className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0 text-white/50 hover:text-white\"\n                  >\n                    ×\n                  </Button>\n                )}\n              </div>\n            </form>\n          </div>\n\n          {/* Right: Action Buttons */}\n          <div className=\"flex items-center gap-2\">\n            {/* Filters Badge */}\n            {activeFiltersCount > 0 && (\n              <Badge variant=\"secondary\" className=\"pokeball-bg text-white border-none\">\n                {activeFiltersCount} filter{activeFiltersCount !== 1 ? 's' : ''}\n              </Badge>\n            )}\n\n            {/* Favorites Count */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              asChild\n              className=\"text-white hover:bg-white/10 relative\"\n            >\n              <Link href=\"/favorites\" className=\"flex items-center gap-1\">\n                <Heart className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Favorites</span>\n                {state.favorites.length > 0 && (\n                  <Badge className=\"pokeball-bg text-white border-none ml-1 h-5 px-1.5 text-xs\">\n                    {state.favorites.length}\n                  </Badge>\n                )}\n              </Link>\n            </Button>\n\n            {/* Comparison Mode Toggle */}\n            <Button\n              variant={state.comparisonMode ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={toggleComparisonMode}\n              className={cn(\n                'text-white relative',\n                state.comparisonMode\n                  ? 'pokeball-bg hover:bg-red-600'\n                  : 'hover:bg-white/10'\n              )}\n            >\n              <BarChart3 className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline ml-1\">Compare</span>\n              {state.selectedPokemon.length > 0 && (\n                <Badge className=\"absolute -top-1 -right-1 h-5 w-5 p-0 bg-yellow-500 text-xs text-black\">\n                  {state.selectedPokemon.length}\n                </Badge>\n              )}\n            </Button>\n\n            {/* Desktop Sidebar Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleSidebar}\n              className=\"hidden lg:flex text-white hover:bg-white/10\"\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        <nav className=\"lg:hidden mt-4 flex items-center gap-1 overflow-x-auto\">\n          {navigationItems.map((item) => {\n            const Icon = item.icon;\n            return (\n              <Link\n                key={item.href}\n                href={item.href}\n                className={cn(\n                  'flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors whitespace-nowrap',\n                  item.active\n                    ? 'text-white bg-white/10 border border-white/20'\n                    : 'text-white/70 hover:text-white hover:bg-white/5'\n                )}\n              >\n                <Icon className=\"h-4 w-4\" />\n                {item.label}\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Search Suggestions (if there's a query) */}\n        {state.searchHistory.length > 0 && state.filters.searchQuery === '' && (\n          <div className=\"mt-4 lg:hidden\">\n            <div className=\"text-xs text-white/60 mb-2\">Recent searches:</div>\n            <div className=\"flex gap-2 overflow-x-auto\">\n              {state.searchHistory.slice(0, 5).map((term, index) => (\n                <Button\n                  key={index}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setFilter({ searchQuery: term })}\n                  className=\"text-white/70 hover:text-white hover:bg-white/5 whitespace-nowrap\"\n                >\n                  {term}\n                </Button>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Comparison Mode Banner */}\n      {state.comparisonMode && (\n        <div className=\"bg-gradient-to-r from-yellow-500/20 to-orange-500/20 border-t border-yellow-500/30\">\n          <div className=\"container mx-auto px-4 py-2\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-4 w-4 text-yellow-300\" />\n                <span className=\"text-sm text-yellow-100\">\n                  Comparison mode active - Select up to 2 Pokémon to compare\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                {state.selectedPokemon.length === 2 && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    asChild\n                    className=\"border-yellow-400 text-yellow-100 hover:bg-yellow-400 hover:text-black\"\n                  >\n                    <Link href=\"/compare\">\n                      View Comparison\n                    </Link>\n                  </Button>\n                )}\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={toggleComparisonMode}\n                  className=\"text-yellow-100 hover:bg-white/10\"\n                >\n                  Exit\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </header>\n  );\n}",
      "props": [
        {
          "name": "className",
          "type": "unknown",
          "required": false
        }
      ],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change",
        "careful-modification",
        "test-thoroughly"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "hooks": [
          "usePokemonContext"
        ],
        "complexity": "complex"
      }
    },
    "phoenix-1758242370170": {
      "phoenixId": "phoenix-1758242370170",
      "componentName": "DashboardContent",
      "filePath": "src/components/layout/pokemon-dashboard.tsx",
      "lineNumber": 13,
      "columnNumber": 0,
      "sourceCode": "function DashboardContent() {\n  const { state } = usePokemonContext();\n\n  // Fetch Pokemon data with infinite scroll\n  const {\n    data: infiniteData,\n    isLoading,\n    isError,\n    error,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n  } = useInfinitePokemonList(20);\n\n  // Fetch featured Pokemon\n  const {\n    data: featuredPokemon,\n    isLoading: featuredLoading,\n  } = useFeaturedPokemon();\n\n  // Flatten the paginated data\n  const allPokemon = React.useMemo(() => {\n    if (!infiniteData?.pages) return [];\n\n    const pokemonUrls = infiniteData.pages\n      .flatMap(page => page.results)\n      .map(pokemon => pokemon.url);\n\n    // Extract IDs and create card data\n    const pokemonIds = pokemonUrls.map(url => {\n      const parts = url.split('/');\n      return parseInt(parts[parts.length - 2]);\n    });\n\n    // This is a simplified version - in a real app, you'd fetch full Pokemon data\n    return pokemonIds.map(id => ({\n      id,\n      name: `Pokemon ${id}`,\n      sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`,\n      types: ['normal'], // Placeholder\n      height: 10,\n      weight: 100,\n      stats: [\n        { name: 'HP', value: 45 },\n        { name: 'Attack', value: 49 },\n        { name: 'Defense', value: 49 },\n        { name: 'Sp. Attack', value: 65 },\n        { name: 'Sp. Defense', value: 65 },\n        { name: 'Speed', value: 45 },\n      ],\n    }));\n  }, [infiniteData]);\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Sidebar */}\n      <Sidebar />\n\n      {/* Main Content */}\n      <div\n        className={cn(\n          'flex-1 flex flex-col transition-all duration-300',\n          state.sidebarOpen ? 'lg:ml-64' : 'lg:ml-0'\n        )}\n      >\n        {/* Header */}\n        <Header />\n\n        {/* Main Content Area */}\n        <main className=\"flex-1 container mx-auto px-4 py-6 space-y-8\">\n          {/* Featured Pokemon Section */}\n          {featuredPokemon && !featuredLoading && (\n            <section className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-2xl font-bold text-white\">Featured Pokémon</h2>\n                <div className=\"text-sm text-white/70\">\n                  Discover amazing Pokémon\n                </div>\n              </div>\n              <PokemonCard\n                pokemon={featuredPokemon}\n                variant=\"featured\"\n                className=\"max-w-4xl mx-auto\"\n              />\n            </section>\n          )}\n\n          {/* Loading state for featured Pokemon */}\n          {featuredLoading && (\n            <section className=\"space-y-4\">\n              <h2 className=\"text-2xl font-bold text-white\">Featured Pokémon</h2>\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"flex items-center gap-3\">\n                  <Loader2 className=\"h-6 w-6 animate-spin text-white\" />\n                  <span className=\"text-white\">Loading featured Pokémon...</span>\n                </div>\n              </div>\n            </section>\n          )}\n\n          {/* Pokemon Grid Section */}\n          <section className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold text-white\">All Pokémon</h2>\n              <div className=\"text-sm text-white/70\">\n                Browse the complete Pokédex\n              </div>\n            </div>\n\n            <PokemonGrid\n              pokemon={allPokemon}\n              loading={isLoading}\n              error={isError ? error?.message : undefined}\n              hasNextPage={hasNextPage}\n              onLoadMore={fetchNextPage}\n              loadingMore={isFetchingNextPage}\n            />\n          </section>\n\n          {/* Quick Stats Section */}\n          <section className=\"grid grid-cols-1 md:grid-cols-3 gap-6 py-8\">\n            <div className=\"pokemon-card p-6 text-center\">\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {allPokemon.length}\n              </div>\n              <div className=\"text-white/70\">Pokémon Loaded</div>\n            </div>\n            <div className=\"pokemon-card p-6 text-center\">\n              <div className=\"text-3xl font-bold pokeball-red mb-2\">\n                {state.favorites.length}\n              </div>\n              <div className=\"text-white/70\">Favorites</div>\n            </div>\n            <div className=\"pokemon-card p-6 text-center\">\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {state.filters.types.length + state.filters.generations.length}\n              </div>\n              <div className=\"text-white/70\">Active Filters</div>\n            </div>\n          </section>\n        </main>\n      </div>\n    </div>\n  );\n}",
      "props": [],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change",
        "careful-modification",
        "test-thoroughly"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "hooks": [
          "usePokemonContext",
          "useInfinitePokemonList",
          "useFeaturedPokemon"
        ],
        "complexity": "complex"
      }
    },
    "phoenix-1758242370171": {
      "phoenixId": "phoenix-1758242370171",
      "componentName": "EnhancedDashboard",
      "filePath": "src/components/layout/pokemon-dashboard.tsx",
      "lineNumber": 160,
      "columnNumber": 0,
      "sourceCode": "function EnhancedDashboard() {\n  const { state } = usePokemonContext();\n  const [pokemonData, setPokemonData] = React.useState<any[]>([]);\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState<string | null>(null);\n\n  // Load initial Pokemon data\n  React.useEffect(() => {\n    const loadPokemonData = async () => {\n      try {\n        setLoading(true);\n\n        // Load first 151 Pokemon (Generation 1) as sample data\n        const pokemonPromises = Array.from({ length: 50 }, (_, i) => {\n          const id = i + 1;\n          return fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\n            .then(res => res.json())\n            .then(pokemon => ({\n              id: pokemon.id,\n              name: pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1),\n              sprite: pokemon.sprites.other?.['official-artwork']?.front_default ||\n                      pokemon.sprites.front_default || '',\n              types: pokemon.types.map((t: any) => t.type.name),\n              height: pokemon.height,\n              weight: pokemon.weight,\n              stats: pokemon.stats.map((s: any) => ({\n                name: s.stat.name === 'hp' ? 'HP' :\n                      s.stat.name === 'special-attack' ? 'Sp. Attack' :\n                      s.stat.name === 'special-defense' ? 'Sp. Defense' :\n                      s.stat.name.charAt(0).toUpperCase() + s.stat.name.slice(1),\n                value: s.base_stat\n              }))\n            }));\n        });\n\n        const pokemonResults = await Promise.all(pokemonPromises);\n        setPokemonData(pokemonResults);\n        setError(null);\n      } catch (err) {\n        console.error('Error loading Pokemon:', err);\n        setError('Failed to load Pokemon data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadPokemonData();\n  }, []);\n\n  // Get featured Pokemon (random from loaded data)\n  const featuredPokemon = React.useMemo(() => {\n    if (pokemonData.length === 0) return null;\n\n    // Featured Pokemon IDs (popular ones)\n    const featuredIds = [1, 4, 7, 25, 150]; // Bulbasaur, Charmander, Squirtle, Pikachu, Mewtwo\n    const availableFeatured = pokemonData.filter(p => featuredIds.includes(p.id));\n\n    if (availableFeatured.length > 0) {\n      return availableFeatured[Math.floor(Math.random() * availableFeatured.length)];\n    }\n\n    return pokemonData[Math.floor(Math.random() * pokemonData.length)];\n  }, [pokemonData]);\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Sidebar */}\n      <Sidebar />\n\n      {/* Main Content */}\n      <div\n        className={cn(\n          'flex-1 flex flex-col transition-all duration-300',\n          state.sidebarOpen ? 'lg:ml-64' : 'lg:ml-0'\n        )}\n      >\n        {/* Header */}\n        <Header />\n\n        {/* Main Content Area */}\n        <main className=\"flex-1 container mx-auto px-4 py-6 space-y-8\">\n          {/* Featured Pokemon Section */}\n          {featuredPokemon && (\n            <section className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-2xl font-bold text-white\">Featured Pokémon</h2>\n                <div className=\"text-sm text-white/70\">\n                  Discover amazing Pokémon\n                </div>\n              </div>\n              <PokemonCard\n                pokemon={featuredPokemon}\n                variant=\"featured\"\n                className=\"max-w-4xl mx-auto\"\n              />\n            </section>\n          )}\n\n          {/* Pokemon Grid Section */}\n          <section className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold text-white\">All Pokémon</h2>\n              <div className=\"text-sm text-white/70\">\n                Browse the complete Pokédex\n              </div>\n            </div>\n\n            <PokemonGrid\n              pokemon={pokemonData}\n              loading={loading}\n              error={error}\n            />\n          </section>\n\n          {/* Quick Stats Section */}\n          <section className=\"grid grid-cols-1 md:grid-cols-3 gap-6 py-8\">\n            <div className=\"pokemon-card p-6 text-center\">\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {pokemonData.length}\n              </div>\n              <div className=\"text-white/70\">Pokémon Loaded</div>\n            </div>\n            <div className=\"pokemon-card p-6 text-center\">\n              <div className=\"text-3xl font-bold pokeball-red mb-2\">\n                {state.favorites.length}\n              </div>\n              <div className=\"text-white/70\">Favorites</div>\n            </div>\n            <div className=\"pokemon-card p-6 text-center\">\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {state.filters.types.length + state.filters.generations.length}\n              </div>\n              <div className=\"text-white/70\">Active Filters</div>\n            </div>\n          </section>\n        </main>\n      </div>\n    </div>\n  );\n}",
      "props": [],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change",
        "careful-modification",
        "test-thoroughly"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "hooks": [
          "usePokemonContext"
        ],
        "complexity": "complex"
      }
    },
    "phoenix-1758242370172": {
      "phoenixId": "phoenix-1758242370172",
      "componentName": "PokemonDashboard",
      "filePath": "src/components/layout/pokemon-dashboard.tsx",
      "lineNumber": 301,
      "columnNumber": 7,
      "sourceCode": "export function PokemonDashboard() {\n  return (\n    <Suspense\n      fallback={\n        <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-900 to-gray-800\">\n          <div className=\"flex items-center gap-3\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-white\" />\n            <span className=\"text-white text-lg\">Loading Pokédex...</span>\n          </div>\n        </div>\n      }\n    >\n      <EnhancedDashboard />\n    </Suspense>\n  );\n}",
      "props": [],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "complexity": "moderate"
      }
    },
    "phoenix-1758242370173": {
      "phoenixId": "phoenix-1758242370173",
      "componentName": "Sidebar",
      "filePath": "src/components/layout/sidebar.tsx",
      "lineNumber": 18,
      "columnNumber": 7,
      "sourceCode": "export function Sidebar({ className }: SidebarProps) {\n  const {\n    state,\n    setFilter,\n    resetFilters,\n    setViewMode,\n    toggleSidebar,\n    setSidebar,\n    isTypeSelected,\n    isGenerationSelected,\n    getActiveFiltersCount,\n  } = usePokemonContext();\n\n  const handleTypeToggle = (type: PokemonType) => {\n    const isSelected = isTypeSelected(type);\n    const newTypes = isSelected\n      ? state.filters.types.filter(t => t !== type)\n      : [...state.filters.types, type];\n\n    setFilter({ types: newTypes });\n  };\n\n  const handleGenerationToggle = (generation: number) => {\n    const isSelected = isGenerationSelected(generation);\n    const newGenerations = isSelected\n      ? state.filters.generations.filter(g => g !== generation)\n      : [...state.filters.generations, generation];\n\n    setFilter({ generations: newGenerations });\n  };\n\n  const handleSortChange = (sortBy: 'id' | 'name' | 'height' | 'weight') => {\n    const newOrder = state.filters.sortBy === sortBy && state.filters.sortOrder === 'asc'\n      ? 'desc'\n      : 'asc';\n\n    setFilter({ sortBy, sortOrder: newOrder });\n  };\n\n  const activeFiltersCount = getActiveFiltersCount();\n\n  // Close sidebar on mobile when clicking outside\n  const handleBackdropClick = () => {\n    if (window.innerWidth < 1024) {\n      setSidebar(false);\n    }\n  };\n\n  return (\n    <>\n      {/* Mobile Backdrop */}\n      {state.sidebarOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-40 lg:hidden\"\n          onClick={handleBackdropClick}\n        />\n      )}\n\n      {/* Sidebar */}\n      <aside\n        className={cn(\n          'pokemon-sidebar fixed left-0 top-0 h-full w-64 z-50 transition-transform duration-300 lg:relative lg:translate-x-0',\n          state.sidebarOpen ? 'translate-x-0' : '-translate-x-full',\n          className\n        )}\n      >\n        <div className=\"flex h-full flex-col\">\n          {/* Sidebar Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-border/50\">\n            <div className=\"flex items-center gap-2\">\n              <Filter className=\"h-5 w-5 text-white\" />\n              <h2 className=\"text-lg font-semibold text-white\">Filters</h2>\n              {activeFiltersCount > 0 && (\n                <Badge className=\"pokeball-bg text-white border-none h-5 px-2\">\n                  {activeFiltersCount}\n                </Badge>\n              )}\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={resetFilters}\n                disabled={activeFiltersCount === 0}\n                className=\"text-white/70 hover:text-white hover:bg-white/10 h-8 px-2\"\n              >\n                <RotateCcw className=\"h-3 w-3\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={toggleSidebar}\n                className=\"text-white/70 hover:text-white hover:bg-white/10 h-8 w-8\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          <ScrollArea className=\"flex-1\">\n            <div className=\"p-4 space-y-6\">\n              {/* View Mode Toggle */}\n              <div className=\"space-y-3\">\n                <h3 className=\"text-sm font-medium text-white flex items-center gap-2\">\n                  <Grid className=\"h-4 w-4\" />\n                  View Mode\n                </h3>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant={state.viewMode === 'grid' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setViewMode('grid')}\n                    className={cn(\n                      'flex-1',\n                      state.viewMode === 'grid'\n                        ? 'pokeball-bg text-white border-none'\n                        : 'border-white/20 text-white hover:bg-white/10'\n                    )}\n                  >\n                    <Grid className=\"h-4 w-4 mr-1\" />\n                    Grid\n                  </Button>\n                  <Button\n                    variant={state.viewMode === 'list' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setViewMode('list')}\n                    className={cn(\n                      'flex-1',\n                      state.viewMode === 'list'\n                        ? 'pokeball-bg text-white border-none'\n                        : 'border-white/20 text-white hover:bg-white/10'\n                    )}\n                  >\n                    <List className=\"h-4 w-4 mr-1\" />\n                    List\n                  </Button>\n                </div>\n              </div>\n\n              <Separator className=\"bg-border/50\" />\n\n              {/* Show Favorites Toggle */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Sparkles className=\"h-4 w-4 text-white\" />\n                  <label className=\"text-sm font-medium text-white cursor-pointer\">\n                    Show Only Favorites\n                  </label>\n                </div>\n                <Switch\n                  checked={state.filters.favorites}\n                  onCheckedChange={(checked) => setFilter({ favorites: checked })}\n                  className=\"data-[state=checked]:bg-red-600\"\n                />\n              </div>\n\n              <Separator className=\"bg-border/50\" />\n\n              {/* Sort Options */}\n              <div className=\"space-y-3\">\n                <h3 className=\"text-sm font-medium text-white\">Sort By</h3>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {[\n                    { key: 'id' as const, label: 'ID' },\n                    { key: 'name' as const, label: 'Name' },\n                    { key: 'height' as const, label: 'Height' },\n                    { key: 'weight' as const, label: 'Weight' },\n                  ].map((sort) => (\n                    <Button\n                      key={sort.key}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleSortChange(sort.key)}\n                      className={cn(\n                        'justify-start border-white/20 text-white hover:bg-white/10',\n                        state.filters.sortBy === sort.key && 'pokeball-bg border-red-600'\n                      )}\n                    >\n                      {sort.label}\n                      {state.filters.sortBy === sort.key && (\n                        <span className=\"ml-auto text-xs\">\n                          {state.filters.sortOrder === 'asc' ? '↑' : '↓'}\n                        </span>\n                      )}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              <Separator className=\"bg-border/50\" />\n\n              {/* Type Filters */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-sm font-medium text-white\">Types</h3>\n                  {state.filters.types.length > 0 && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setFilter({ types: [] })}\n                      className=\"text-white/70 hover:text-white hover:bg-white/10 h-6 px-2 text-xs\"\n                    >\n                      Clear\n                    </Button>\n                  )}\n                </div>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {POKEMON_TYPES.map((type) => (\n                    <Button\n                      key={type}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleTypeToggle(type)}\n                      className={cn(\n                        'justify-start border-white/20 text-white hover:bg-white/10 capitalize',\n                        isTypeSelected(type) && `type-${type} border-current text-white font-medium`\n                      )}\n                    >\n                      <span\n                        className={cn(\n                          'w-3 h-3 rounded-full mr-2',\n                          `type-${type}`\n                        )}\n                      />\n                      {type}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              <Separator className=\"bg-border/50\" />\n\n              {/* Generation Filters */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-sm font-medium text-white\">Generations</h3>\n                  {state.filters.generations.length > 0 && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setFilter({ generations: [] })}\n                      className=\"text-white/70 hover:text-white hover:bg-white/10 h-6 px-2 text-xs\"\n                    >\n                      Clear\n                    </Button>\n                  )}\n                </div>\n                <div className=\"space-y-2\">\n                  {POKEMON_GENERATIONS.map((gen) => (\n                    <Button\n                      key={gen.id}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleGenerationToggle(gen.id)}\n                      className={cn(\n                        'w-full justify-between border-white/20 text-white hover:bg-white/10',\n                        isGenerationSelected(gen.id) && 'pokeball-bg border-red-600'\n                      )}\n                    >\n                      <span>{gen.name}</span>\n                      <span className=\"text-xs opacity-70\">\n                        #{gen.range[0]}-{gen.range[1]}\n                      </span>\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              <Separator className=\"bg-border/50\" />\n\n              {/* Filter Summary */}\n              <div className=\"space-y-3\">\n                <h3 className=\"text-sm font-medium text-white\">Active Filters</h3>\n                <div className=\"space-y-2 text-sm text-white/70\">\n                  {state.filters.searchQuery && (\n                    <div className=\"flex items-center justify-between\">\n                      <span>Search:</span>\n                      <span className=\"text-white\">\"{state.filters.searchQuery}\"</span>\n                    </div>\n                  )}\n                  {state.filters.types.length > 0 && (\n                    <div className=\"flex items-center justify-between\">\n                      <span>Types:</span>\n                      <span className=\"text-white\">{state.filters.types.length} selected</span>\n                    </div>\n                  )}\n                  {state.filters.generations.length > 0 && (\n                    <div className=\"flex items-center justify-between\">\n                      <span>Generations:</span>\n                      <span className=\"text-white\">{state.filters.generations.length} selected</span>\n                    </div>\n                  )}\n                  {state.filters.favorites && (\n                    <div className=\"flex items-center justify-between\">\n                      <span>Favorites:</span>\n                      <span className=\"text-white\">Only</span>\n                    </div>\n                  )}\n                  <div className=\"flex items-center justify-between\">\n                    <span>Sort:</span>\n                    <span className=\"text-white capitalize\">\n                      {state.filters.sortBy} ({state.filters.sortOrder})\n                    </span>\n                  </div>\n                  {activeFiltersCount === 0 && (\n                    <div className=\"text-center text-white/50 py-4\">\n                      No filters active\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </ScrollArea>\n        </div>\n      </aside>\n    </>\n  );\n}",
      "props": [
        {
          "name": "className",
          "type": "unknown",
          "required": false
        }
      ],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change",
        "careful-modification",
        "test-thoroughly"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "hooks": [
          "usePokemonContext"
        ],
        "complexity": "complex"
      }
    },
    "phoenix-1758242370174": {
      "phoenixId": "phoenix-1758242370174",
      "componentName": "PokemonCard",
      "filePath": "src/components/pokemon/pokemon-card.tsx",
      "lineNumber": 22,
      "columnNumber": 7,
      "sourceCode": "export function PokemonCard({\n  pokemon,\n  variant = 'default',\n  showStats = true,\n  className\n}: PokemonCardProps) {\n  const {\n    state,\n    toggleFavorite,\n    selectPokemon,\n    deselectPokemon,\n    isPokemonSelected,\n    isPokemonFavorite,\n  } = usePokemonContext();\n\n  const isFavorite = isPokemonFavorite(pokemon.id);\n  const isSelected = isPokemonSelected(pokemon.id);\n  const isComparisonMode = state.comparisonMode;\n\n  const handleFavoriteClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    toggleFavorite(pokemon.id);\n  };\n\n  const handleSelectClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (isSelected) {\n      deselectPokemon(pokemon.id);\n    } else {\n      selectPokemon(pokemon.id);\n    }\n  };\n\n  const getStatIcon = (statName: string) => {\n    switch (statName.toLowerCase()) {\n      case 'hp':\n        return <Heart className=\"h-3 w-3\" />;\n      case 'attack':\n        return <Swords className=\"h-3 w-3\" />;\n      case 'defense':\n        return <Shield className=\"h-3 w-3\" />;\n      case 'sp. attack':\n        return <Zap className=\"h-3 w-3\" />;\n      case 'sp. defense':\n        return <Shield className=\"h-3 w-3\" />;\n      case 'speed':\n        return <Star className=\"h-3 w-3\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getStatColor = (value: number) => {\n    if (value >= 100) return 'bg-green-500';\n    if (value >= 80) return 'bg-yellow-500';\n    if (value >= 60) return 'bg-orange-500';\n    return 'bg-red-500';\n  };\n\n  if (variant === 'compact') {\n    return (\n      <Card className={cn('pokemon-card group cursor-pointer', className)}>\n        <Link href={`/pokemon/${pokemon.id}`}>\n          <CardContent className=\"p-3\">\n            <div className=\"flex items-center gap-3\">\n              {/* Pokemon Image */}\n              <div className=\"relative flex-shrink-0\">\n                <div className=\"w-12 h-12 relative\">\n                  {pokemon.sprite ? (\n                    <Image\n                      src={pokemon.sprite}\n                      alt={pokemon.name}\n                      fill\n                      className=\"object-contain\"\n                      sizes=\"48px\"\n                    />\n                  ) : (\n                    <div className=\"w-full h-full bg-muted rounded-lg flex items-center justify-center\">\n                      <span className=\"text-2xl\">?</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Pokemon Info */}\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <span className=\"text-xs text-muted-foreground\">#{pokemon.id.toString().padStart(3, '0')}</span>\n                  <h3 className=\"font-semibold text-sm truncate text-foreground\">{pokemon.name}</h3>\n                </div>\n                <div className=\"flex gap-1\">\n                  {pokemon.types.map((type) => (\n                    <Badge\n                      key={type}\n                      className={cn('text-xs px-2 py-0 h-5 text-white', `type-${type}`)}\n                    >\n                      {type}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex items-center gap-1\">\n                {isComparisonMode && (\n                  <Button\n                    variant={isSelected ? 'default' : 'outline'}\n                    size=\"icon\"\n                    onClick={handleSelectClick}\n                    className={cn(\n                      'h-8 w-8',\n                      isSelected && 'pokeball-bg hover:bg-red-600'\n                    )}\n                  >\n                    <BarChart3 className=\"h-3 w-3\" />\n                  </Button>\n                )}\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={handleFavoriteClick}\n                  className={cn(\n                    'h-8 w-8',\n                    isFavorite ? 'text-red-500 hover:text-red-600' : 'text-muted-foreground hover:text-red-500'\n                  )}\n                >\n                  <Heart className={cn('h-3 w-3', isFavorite && 'fill-current')} />\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Link>\n      </Card>\n    );\n  }\n\n  if (variant === 'featured') {\n    return (\n      <Card className={cn('pokemon-card group cursor-pointer overflow-hidden', className)}>\n        <Link href={`/pokemon/${pokemon.id}`}>\n          <div className=\"relative\">\n            {/* Background Gradient */}\n            <div className=\"absolute inset-0 bg-gradient-to-br from-blue-500/20 to-purple-600/20\" />\n\n            <CardContent className=\"relative p-6\">\n              <div className=\"flex flex-col lg:flex-row items-center gap-6\">\n                {/* Pokemon Image */}\n                <div className=\"relative flex-shrink-0\">\n                  <div className=\"w-32 h-32 lg:w-40 lg:h-40 relative\">\n                    {pokemon.sprite ? (\n                      <Image\n                        src={pokemon.sprite}\n                        alt={pokemon.name}\n                        fill\n                        className=\"object-contain drop-shadow-lg\"\n                        sizes=\"(max-width: 1024px) 128px, 160px\"\n                        priority\n                      />\n                    ) : (\n                      <div className=\"w-full h-full bg-muted rounded-lg flex items-center justify-center\">\n                        <span className=\"text-6xl\">?</span>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Pokemon ID Badge */}\n                  <Badge className=\"absolute -top-2 -left-2 pokeball-bg text-white\">\n                    #{pokemon.id.toString().padStart(3, '0')}\n                  </Badge>\n                </div>\n\n                {/* Pokemon Details */}\n                <div className=\"flex-1 text-center lg:text-left\">\n                  <h2 className=\"text-2xl lg:text-3xl font-bold text-foreground mb-2\">\n                    {pokemon.name}\n                  </h2>\n\n                  {/* Types */}\n                  <div className=\"flex gap-2 justify-center lg:justify-start mb-4\">\n                    {pokemon.types.map((type) => (\n                      <Badge\n                        key={type}\n                        className={cn('text-sm px-3 py-1 text-white capitalize', `type-${type}`)}\n                      >\n                        {type}\n                      </Badge>\n                    ))}\n                  </div>\n\n                  {/* Physical Stats */}\n                  <div className=\"grid grid-cols-2 gap-4 mb-4 text-sm\">\n                    <div className=\"text-center lg:text-left\">\n                      <div className=\"text-muted-foreground\">Height</div>\n                      <div className=\"font-semibold text-foreground\">\n                        {(pokemon.height / 10).toFixed(1)} m\n                      </div>\n                    </div>\n                    <div className=\"text-center lg:text-left\">\n                      <div className=\"text-muted-foreground\">Weight</div>\n                      <div className=\"font-semibold text-foreground\">\n                        {(pokemon.weight / 10).toFixed(1)} kg\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Quick Stats */}\n                  {showStats && (\n                    <div className=\"space-y-2\">\n                      {pokemon.stats.slice(0, 3).map((stat) => (\n                        <div key={stat.name} className=\"flex items-center gap-2\">\n                          {getStatIcon(stat.name)}\n                          <span className=\"text-xs text-muted-foreground w-16 text-left\">\n                            {stat.name}\n                          </span>\n                          <div className=\"flex-1\">\n                            <Progress value={(stat.value / 200) * 100} className=\"h-2\" />\n                          </div>\n                          <span className=\"text-xs font-medium text-foreground w-8 text-right\">\n                            {stat.value}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex lg:flex-col gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={handleFavoriteClick}\n                    className={cn(\n                      'border-white/20 backdrop-blur-sm',\n                      isFavorite ? 'text-red-500 hover:text-red-600 bg-red-500/10' : 'text-muted-foreground hover:text-red-500'\n                    )}\n                  >\n                    <Heart className={cn('h-4 w-4', isFavorite && 'fill-current')} />\n                  </Button>\n\n                  {isComparisonMode && (\n                    <Button\n                      variant={isSelected ? 'default' : 'outline'}\n                      size=\"icon\"\n                      onClick={handleSelectClick}\n                      className={cn(\n                        'border-white/20 backdrop-blur-sm',\n                        isSelected && 'pokeball-bg hover:bg-red-600'\n                      )}\n                    >\n                      <BarChart3 className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    asChild\n                    className=\"border-white/20 backdrop-blur-sm\"\n                  >\n                    <Link href={`/pokemon/${pokemon.id}`}>\n                      <Eye className=\"h-4 w-4\" />\n                    </Link>\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </div>\n        </Link>\n      </Card>\n    );\n  }\n\n  // Default variant\n  return (\n    <Card className={cn('pokemon-card group cursor-pointer overflow-hidden', className)}>\n      <Link href={`/pokemon/${pokemon.id}`}>\n        <CardContent className=\"p-4\">\n          {/* Header with ID and Actions */}\n          <div className=\"flex items-center justify-between mb-3\">\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              #{pokemon.id.toString().padStart(3, '0')}\n            </Badge>\n            <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n              {isComparisonMode && (\n                <Button\n                  variant={isSelected ? 'default' : 'outline'}\n                  size=\"icon\"\n                  onClick={handleSelectClick}\n                  className={cn(\n                    'h-6 w-6',\n                    isSelected && 'pokeball-bg hover:bg-red-600'\n                  )}\n                >\n                  <BarChart3 className=\"h-3 w-3\" />\n                </Button>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleFavoriteClick}\n                className={cn(\n                  'h-6 w-6',\n                  isFavorite ? 'text-red-500 hover:text-red-600' : 'text-muted-foreground hover:text-red-500'\n                )}\n              >\n                <Heart className={cn('h-3 w-3', isFavorite && 'fill-current')} />\n              </Button>\n            </div>\n          </div>\n\n          {/* Pokemon Image */}\n          <div className=\"relative mb-3\">\n            <div className=\"w-full h-32 relative\">\n              {pokemon.sprite ? (\n                <Image\n                  src={pokemon.sprite}\n                  alt={pokemon.name}\n                  fill\n                  className=\"object-contain transition-transform group-hover:scale-110\"\n                  sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n                />\n              ) : (\n                <div className=\"w-full h-full bg-muted rounded-lg flex items-center justify-center\">\n                  <span className=\"text-4xl\">?</span>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Pokemon Name */}\n          <h3 className=\"font-semibold text-lg text-center text-foreground mb-2 truncate\">\n            {pokemon.name}\n          </h3>\n\n          {/* Types */}\n          <div className=\"flex gap-1 justify-center mb-3 flex-wrap\">\n            {pokemon.types.map((type) => (\n              <Badge\n                key={type}\n                className={cn('text-xs px-2 py-1 text-white capitalize', `type-${type}`)}\n              >\n                {type}\n              </Badge>\n            ))}\n          </div>\n\n          {/* Physical Stats */}\n          <div className=\"grid grid-cols-2 gap-2 mb-3 text-xs text-muted-foreground\">\n            <div className=\"text-center\">\n              <div>Height</div>\n              <div className=\"font-medium text-foreground\">\n                {(pokemon.height / 10).toFixed(1)}m\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div>Weight</div>\n              <div className=\"font-medium text-foreground\">\n                {(pokemon.weight / 10).toFixed(1)}kg\n              </div>\n            </div>\n          </div>\n\n          {/* Base Stats Preview */}\n          {showStats && (\n            <div className=\"space-y-1\">\n              {pokemon.stats.slice(0, 3).map((stat) => (\n                <div key={stat.name} className=\"flex items-center gap-2 text-xs\">\n                  {getStatIcon(stat.name)}\n                  <span className=\"text-muted-foreground flex-1 truncate\">\n                    {stat.name}\n                  </span>\n                  <div className=\"w-16 bg-muted rounded-full h-1.5\">\n                    <div\n                      className={cn('h-full rounded-full', getStatColor(stat.value))}\n                      style={{ width: `${Math.min((stat.value / 200) * 100, 100)}%` }}\n                    />\n                  </div>\n                  <span className=\"font-medium text-foreground w-6 text-right\">\n                    {stat.value}\n                  </span>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Link>\n    </Card>\n  );\n}",
      "props": [
        {
          "name": "pokemon",
          "type": "unknown",
          "required": false
        },
        {
          "name": "variant",
          "type": "unknown",
          "required": false
        },
        {
          "name": "showStats",
          "type": "unknown",
          "required": false
        },
        {
          "name": "className",
          "type": "unknown",
          "required": false
        }
      ],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change",
        "careful-modification",
        "test-thoroughly"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "hooks": [
          "usePokemonContext"
        ],
        "complexity": "complex"
      }
    },
    "phoenix-1758242370175": {
      "phoenixId": "phoenix-1758242370175",
      "componentName": "PokemonGrid",
      "filePath": "src/components/pokemon/pokemon-grid.tsx",
      "lineNumber": 21,
      "columnNumber": 7,
      "sourceCode": "export function PokemonGrid({\n  pokemon,\n  loading,\n  error,\n  hasNextPage,\n  onLoadMore,\n  loadingMore,\n  className\n}: PokemonGridProps) {\n  const { state } = usePokemonContext();\n\n  // Filter pokemon based on current filters\n  const filteredPokemon = React.useMemo(() => {\n    let filtered = [...pokemon];\n\n    // Apply type filters\n    if (state.filters.types.length > 0) {\n      filtered = filtered.filter(p =>\n        p.types.some(type => state.filters.types.includes(type))\n      );\n    }\n\n    // Apply search filter\n    if (state.filters.searchQuery) {\n      const query = state.filters.searchQuery.toLowerCase();\n      filtered = filtered.filter(p =>\n        p.name.toLowerCase().includes(query) ||\n        p.id.toString().includes(query) ||\n        p.types.some(type => type.toLowerCase().includes(query))\n      );\n    }\n\n    // Apply favorites filter\n    if (state.filters.favorites) {\n      filtered = filtered.filter(p => state.favorites.includes(p.id));\n    }\n\n    // Apply generation filter\n    if (state.filters.generations.length > 0) {\n      filtered = filtered.filter(p => {\n        // Check which generation the pokemon belongs to\n        for (const gen of state.filters.generations) {\n          const ranges = {\n            1: [1, 151],\n            2: [152, 251],\n            3: [252, 386],\n            4: [387, 493],\n            5: [494, 649],\n            6: [650, 721],\n            7: [722, 809],\n            8: [810, 905],\n            9: [906, 1025],\n          };\n          const range = ranges[gen as keyof typeof ranges];\n          if (range && p.id >= range[0] && p.id <= range[1]) {\n            return true;\n          }\n        }\n        return false;\n      });\n    }\n\n    // Apply sorting\n    filtered.sort((a, b) => {\n      const { sortBy, sortOrder } = state.filters;\n      let comparison = 0;\n\n      switch (sortBy) {\n        case 'id':\n          comparison = a.id - b.id;\n          break;\n        case 'name':\n          comparison = a.name.localeCompare(b.name);\n          break;\n        case 'height':\n          comparison = a.height - b.height;\n          break;\n        case 'weight':\n          comparison = a.weight - b.weight;\n          break;\n        default:\n          comparison = a.id - b.id;\n      }\n\n      return sortOrder === 'desc' ? -comparison : comparison;\n    });\n\n    return filtered;\n  }, [pokemon, state.filters, state.favorites]);\n\n  // Loading state\n  if (loading && pokemon.length === 0) {\n    return (\n      <div className={cn('flex items-center justify-center py-12', className)}>\n        <div className=\"flex flex-col items-center gap-4\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n          <p className=\"text-muted-foreground\">Loading Pokémon...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <div className={cn('flex items-center justify-center py-12', className)}>\n        <div className=\"flex flex-col items-center gap-4 text-center\">\n          <AlertCircle className=\"h-8 w-8 text-destructive\" />\n          <div>\n            <h3 className=\"font-semibold text-foreground mb-2\">Error loading Pokémon</h3>\n            <p className=\"text-muted-foreground mb-4\">{error}</p>\n            <Button onClick={() => window.location.reload()} variant=\"outline\">\n              Try Again\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Empty state\n  if (filteredPokemon.length === 0 && !loading) {\n    const hasFilters = (\n      state.filters.types.length > 0 ||\n      state.filters.generations.length > 0 ||\n      state.filters.searchQuery ||\n      state.filters.favorites\n    );\n\n    return (\n      <div className={cn('flex items-center justify-center py-12', className)}>\n        <div className=\"flex flex-col items-center gap-4 text-center max-w-md\">\n          <Search className=\"h-8 w-8 text-muted-foreground\" />\n          <div>\n            <h3 className=\"font-semibold text-foreground mb-2\">\n              {hasFilters ? 'No Pokémon match your filters' : 'No Pokémon found'}\n            </h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {hasFilters\n                ? 'Try adjusting your search criteria or clearing some filters.'\n                : 'There seems to be an issue loading the Pokémon data.'}\n            </p>\n            {hasFilters && (\n              <Button\n                onClick={() => {\n                  // Clear filters logic would go here\n                  console.log('Clear filters');\n                }}\n                variant=\"outline\"\n              >\n                Clear Filters\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const gridCols = state.viewMode === 'grid'\n    ? 'grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6'\n    : 'grid-cols-1';\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      {/* Results Summary */}\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-sm text-muted-foreground\">\n          Showing {filteredPokemon.length} of {pokemon.length} Pokémon\n        </p>\n        {state.viewMode === 'grid' && (\n          <p className=\"text-xs text-muted-foreground\">\n            Grid view\n          </p>\n        )}\n        {state.viewMode === 'list' && (\n          <p className=\"text-xs text-muted-foreground\">\n            List view\n          </p>\n        )}\n      </div>\n\n      {/* Pokemon Grid */}\n      <div className={cn('grid gap-4', gridCols)}>\n        {filteredPokemon.map((pokemon) => (\n          <PokemonCard\n            key={pokemon.id}\n            pokemon={pokemon}\n            variant={state.viewMode === 'list' ? 'compact' : 'default'}\n            showStats={state.viewMode === 'grid'}\n          />\n        ))}\n      </div>\n\n      {/* Load More Button */}\n      {hasNextPage && onLoadMore && (\n        <div className=\"flex justify-center py-6\">\n          <Button\n            onClick={onLoadMore}\n            disabled={loadingMore}\n            variant=\"outline\"\n            size=\"lg\"\n            className=\"min-w-32\"\n          >\n            {loadingMore ? (\n              <>\n                <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                Loading...\n              </>\n            ) : (\n              'Load More'\n            )}\n          </Button>\n        </div>\n      )}\n\n      {/* Loading More Indicator */}\n      {loadingMore && (\n        <div className=\"flex justify-center py-4\">\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Loader2 className=\"h-4 w-4 animate-spin\" />\n            Loading more Pokémon...\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}",
      "props": [
        {
          "name": "pokemon",
          "type": "unknown",
          "required": false
        },
        {
          "name": "loading",
          "type": "unknown",
          "required": false
        },
        {
          "name": "error",
          "type": "unknown",
          "required": false
        },
        {
          "name": "hasNextPage",
          "type": "unknown",
          "required": false
        },
        {
          "name": "onLoadMore",
          "type": "unknown",
          "required": false
        },
        {
          "name": "loadingMore",
          "type": "unknown",
          "required": false
        },
        {
          "name": "className",
          "type": "unknown",
          "required": false
        }
      ],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change",
        "careful-modification",
        "test-thoroughly"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "hooks": [
          "usePokemonContext"
        ],
        "complexity": "complex"
      }
    },
    "phoenix-1758242370176": {
      "phoenixId": "phoenix-1758242370176",
      "componentName": "QueryProvider",
      "filePath": "src/components/query-provider.tsx",
      "lineNumber": 6,
      "columnNumber": 7,
      "sourceCode": "export function QueryProvider({ children }: { children: React.ReactNode }) {\n  const [queryClient] = useState(() => new QueryClient())\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  )\n}",
      "props": [
        {
          "name": "children",
          "type": "unknown",
          "required": false
        }
      ],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change",
        "state-management"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "hooks": [
          "useState"
        ],
        "complexity": "moderate"
      }
    },
    "phoenix-1758242370177": {
      "phoenixId": "phoenix-1758242370177",
      "componentName": "ThemeProvider",
      "filePath": "src/components/theme-provider.tsx",
      "lineNumber": 6,
      "columnNumber": 7,
      "sourceCode": "export function ThemeProvider({\n  children,\n  ...props\n}: React.ComponentProps<typeof NextThemesProvider>) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}",
      "props": [
        {
          "name": "children",
          "type": "unknown",
          "required": false
        }
      ],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "complexity": "simple"
      }
    },
    "phoenix-1758242370178": {
      "phoenixId": "phoenix-1758242370178",
      "componentName": "Badge",
      "filePath": "src/components/ui/badge.tsx",
      "lineNumber": 30,
      "columnNumber": 0,
      "sourceCode": "function Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}",
      "props": [
        {
          "name": "className",
          "type": "unknown",
          "required": false
        },
        {
          "name": "variant",
          "type": "unknown",
          "required": false
        }
      ],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "complexity": "moderate"
      }
    },
    "phoenix-1758242370179": {
      "phoenixId": "phoenix-1758242370179",
      "componentName": "Calendar",
      "filePath": "src/components/ui/calendar.tsx",
      "lineNumber": 10,
      "columnNumber": 0,
      "sourceCode": "function Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        Chevron: (props) => props.orientation === 'left' ? <ChevronLeft className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}",
      "props": [
        {
          "name": "className",
          "type": "unknown",
          "required": false
        },
        {
          "name": "classNames",
          "type": "unknown",
          "required": false
        },
        {
          "name": "showOutsideDays",
          "type": "unknown",
          "required": false
        }
      ],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change",
        "careful-modification",
        "test-thoroughly"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "complexity": "complex"
      }
    },
    "phoenix-1758242370180": {
      "phoenixId": "phoenix-1758242370180",
      "componentName": "Skeleton",
      "filePath": "src/components/ui/skeleton.tsx",
      "lineNumber": 3,
      "columnNumber": 0,
      "sourceCode": "function Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}",
      "props": [
        {
          "name": "className",
          "type": "unknown",
          "required": false
        }
      ],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "complexity": "simple"
      }
    },
    "phoenix-1758242370181": {
      "phoenixId": "phoenix-1758242370181",
      "componentName": "Toaster",
      "filePath": "src/components/ui/toaster.tsx",
      "lineNumber": 13,
      "columnNumber": 7,
      "sourceCode": "export function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}",
      "props": [],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "hooks": [
          "useToast"
        ],
        "complexity": "moderate"
      }
    },
    "phoenix-1758242370182": {
      "phoenixId": "phoenix-1758242370182",
      "componentName": "PokemonProvider",
      "filePath": "src/contexts/pokemon-context.tsx",
      "lineNumber": 227,
      "columnNumber": 7,
      "sourceCode": "export function PokemonProvider({ children }: PokemonProviderProps) {\n  const [state, dispatch] = useReducer(pokemonReducer, initialState);\n\n  // Load persisted state on mount\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      try {\n        const persistedFavorites = localStorage.getItem('pokemon-favorites');\n        const persistedSearchHistory = localStorage.getItem('pokemon-search-history');\n        const persistedViewMode = localStorage.getItem('pokemon-view-mode');\n        const persistedTheme = localStorage.getItem('pokemon-theme');\n        const persistedSidebar = localStorage.getItem('pokemon-sidebar-open');\n\n        const persistedState: Partial<PokemonState> = {};\n\n        if (persistedFavorites) {\n          persistedState.favorites = JSON.parse(persistedFavorites);\n        }\n\n        if (persistedSearchHistory) {\n          persistedState.searchHistory = JSON.parse(persistedSearchHistory);\n        }\n\n        if (persistedViewMode) {\n          persistedState.viewMode = persistedViewMode as 'grid' | 'list';\n        }\n\n        if (persistedTheme) {\n          persistedState.theme = persistedTheme as 'light' | 'dark';\n        }\n\n        if (persistedSidebar) {\n          persistedState.sidebarOpen = JSON.parse(persistedSidebar);\n        }\n\n        if (Object.keys(persistedState).length > 0) {\n          dispatch({ type: 'LOAD_PERSISTED_STATE', payload: persistedState });\n        }\n      } catch (error) {\n        console.error('Error loading persisted state:', error);\n      }\n    }\n  }, []);\n\n  // Persist state changes\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('pokemon-favorites', JSON.stringify(state.favorites));\n    }\n  }, [state.favorites]);\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('pokemon-search-history', JSON.stringify(state.searchHistory));\n    }\n  }, [state.searchHistory]);\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('pokemon-view-mode', state.viewMode);\n    }\n  }, [state.viewMode]);\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('pokemon-theme', state.theme);\n    }\n  }, [state.theme]);\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('pokemon-sidebar-open', JSON.stringify(state.sidebarOpen));\n    }\n  }, [state.sidebarOpen]);\n\n  // Apply theme to document\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      document.documentElement.className = state.theme;\n    }\n  }, [state.theme]);\n\n  // Convenience methods\n  const setFilter = (filter: Partial<PokemonFilter>) => {\n    dispatch({ type: 'SET_FILTER', payload: filter });\n  };\n\n  const resetFilters = () => {\n    dispatch({ type: 'RESET_FILTERS' });\n  };\n\n  const toggleFavorite = (pokemonId: number) => {\n    dispatch({ type: 'TOGGLE_FAVORITE', payload: pokemonId });\n  };\n\n  const addSearchTerm = (term: string) => {\n    if (term.trim()) {\n      dispatch({ type: 'ADD_SEARCH_TERM', payload: term });\n    }\n  };\n\n  const setViewMode = (mode: 'grid' | 'list') => {\n    dispatch({ type: 'SET_VIEW_MODE', payload: mode });\n  };\n\n  const selectPokemon = (pokemonId: number) => {\n    dispatch({ type: 'SELECT_POKEMON', payload: pokemonId });\n  };\n\n  const deselectPokemon = (pokemonId: number) => {\n    dispatch({ type: 'DESELECT_POKEMON', payload: pokemonId });\n  };\n\n  const clearSelection = () => {\n    dispatch({ type: 'CLEAR_SELECTION' });\n  };\n\n  const toggleComparisonMode = () => {\n    dispatch({ type: 'TOGGLE_COMPARISON_MODE' });\n  };\n\n  const toggleSidebar = () => {\n    dispatch({ type: 'TOGGLE_SIDEBAR' });\n  };\n\n  const setSidebar = (open: boolean) => {\n    dispatch({ type: 'SET_SIDEBAR', payload: open });\n  };\n\n  const setTheme = (theme: 'light' | 'dark') => {\n    dispatch({ type: 'SET_THEME', payload: theme });\n  };\n\n  // Utility methods\n  const isTypeSelected = (type: PokemonType) => {\n    return state.filters.types.includes(type);\n  };\n\n  const isGenerationSelected = (generation: number) => {\n    return state.filters.generations.includes(generation);\n  };\n\n  const isPokemonSelected = (pokemonId: number) => {\n    return state.selectedPokemon.includes(pokemonId);\n  };\n\n  const isPokemonFavorite = (pokemonId: number) => {\n    return state.favorites.includes(pokemonId);\n  };\n\n  const getActiveFiltersCount = () => {\n    let count = 0;\n    if (state.filters.types.length > 0) count++;\n    if (state.filters.generations.length > 0) count++;\n    if (state.filters.searchQuery) count++;\n    if (state.filters.favorites) count++;\n    return count;\n  };\n\n  const contextValue: PokemonContextType = {\n    state,\n    dispatch,\n    setFilter,\n    resetFilters,\n    toggleFavorite,\n    addSearchTerm,\n    setViewMode,\n    selectPokemon,\n    deselectPokemon,\n    clearSelection,\n    toggleComparisonMode,\n    toggleSidebar,\n    setSidebar,\n    setTheme,\n    isTypeSelected,\n    isGenerationSelected,\n    isPokemonSelected,\n    isPokemonFavorite,\n    getActiveFiltersCount,\n  };\n\n  return (\n    <PokemonContext.Provider value={contextValue}>\n      {children}\n    </PokemonContext.Provider>\n  );\n}",
      "props": [
        {
          "name": "children",
          "type": "unknown",
          "required": false
        }
      ],
      "imports": [],
      "modificationHints": [
        "text-update",
        "style-change",
        "careful-modification",
        "test-thoroughly",
        "side-effects",
        "lifecycle-management"
      ],
      "astAnalysis": {
        "componentType": "functional",
        "hooks": [
          "useReducer",
          "useEffect",
          "useEffect",
          "useEffect",
          "useEffect",
          "useEffect",
          "useEffect",
          "useEffect"
        ],
        "complexity": "complex"
      }
    }
  },
  "stats": {
    "totalComponents": 22,
    "totalFiles": 72,
    "processingTimeMs": 339
  }
}
